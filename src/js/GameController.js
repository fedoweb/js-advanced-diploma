import PositionedCharacter from "./PositionedCharacter";
import GameState from "./GameState";
import GamePlay from "./GamePlay";
import {generateTeam} from "./generators";
import Bowman from "./characters/Bowman";
import Daemon from "./characters/Daemon";
import Magician from "./characters/Magician";
import Swordsman from "./characters/Swordsman";
import Undead from "./characters/Undead";
import Vampire from "./characters/Vampire";


export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.positions = this.getPositions();
    this.gameState;
  } 

  init() {
    // TODO: add event listeners to gamePlay events
    this.gamePlay.addCellClickListener((index) => this.onCellClick(index));
    this.gamePlay.addCellEnterListener((index) => this.onCellEnter(index));
    this.gamePlay.addCellLeaveListener((index) => this.onCellLeave(index));
    // TODO: load saved stated from stateService
    //this.loadSavedState();
    this.gameState = new GameState();
    console.log(this.gameState);

    this.gamePlay.drawUi('prairie');
    this.gamePlay.redrawPositions(this.positions);
  }
  
  onCellClick(index) {
    //–µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—ã–±—Ä–∞–Ω
    if(this.gameState.selectedCharacter) {
      this.gamePlay.deselectCell(this.gameState.selectedCharacter.position);

      //–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é –∫–ª–µ—Ç–∫—É

      //–∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    } 

    //–≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const clickedCharacter = this.positions.find(char => char.position === index);
    console.log('click', this.gameState);

    if(clickedCharacter && this.isPlayer(clickedCharacter)) {

      this.gameState.selectedCharacter = clickedCharacter;
      this.gamePlay.selectCell(index);
      return;
    }

    // –æ—à–∏–±–∫–∞
    GamePlay.showError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!');
    this.gamePlay.deselectCell(index);
    this.gameState.selectedCharacter = null;
  }

  onCellEnter(index) {
    const targetCharacter = this.positions.find((char) => char.position === index);
    console.log(targetCharacter);

    //–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (targetCharacter && this.gameState.selectedCharacter &&
      this.isPlayer(targetCharacter)) {
      this.gamePlay.setCursor('pointer');
      return;
    }

    //–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å
    if (this.gameState.selectedCharacter &&
      this.isEnemy(targetCharacter) &&
      this.checkAttackRange(this.gameState.selectedCharacter, index)) {

      this.gamePlay.setCursor('crosshair');
      this.gamePlay.selectCell(index, 'red');
      return;
    }

    //–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
    if (this.gameState.selectedCharacter &&
      this.checkMoveRange(this.gameState.selectedCharacter, index)) { //–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      this.gamePlay.selectCell(index, 'green');
      return;
    }

    // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if(this.gameState.selectedCharacter &&
      !this.checkMoveRange(this.gameState.selectedCharacter, index)) {
      this.gamePlay.setCursor('not-allowed');
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor('auto');

    if(this.gameState.selectedCharacter && this.gameState.selectedCharacter.position !== index) {
      this.gamePlay.deselectCell(index);
    }
  }

  //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  getPositions() {
    const playerTeam = this.generatePlayerTeam(this.playerTypes());
    const enemyTeam = this.generateEnemyTeam(this.enemyTypes());
    return [...playerTeam, ...enemyTeam];
  }

  //—Å–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
  changePlayer() {
    this.gameState.currentPlayer === 'player' ? 'enemy' : 'player';
  } 

  //–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
  generatePlayerTeam(allowedTypes) {
    const team = generateTeam(allowedTypes, 2, 2); 
    const teamArr = [];

    for (const character of team.characters) {
      let randomPosition = this.getPlayerPosition(this.gamePlay.boardSize);
      let validatePosition = this.validatePlayerPosition(teamArr, randomPosition);

      const person = new PositionedCharacter(character, validatePosition);
      teamArr.push(person);
    }

    return teamArr;
  }

  //–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  generateEnemyTeam(allowedTypes) {
    const team = generateTeam(allowedTypes, 2, 2); 
    const teamArr = [];

    for (const character of team.characters) {
      let randomPosition = this.getEnemyPosition(this.gamePlay.boardSize);
      let validatePosition = this.validateEnemyPosition(teamArr, randomPosition);

      const person = new PositionedCharacter(character, validatePosition);
      teamArr.push(person);
    }

    return teamArr;
  }

  //–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
  validatePlayerPosition(arr, position) {
    while (arr.some((item) => item.position === position)) {
      position = this.getPlayerPosition(this.gamePlay.boardSize);
    }

    return position;
  }

  //–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  validateEnemyPosition(arr, position) {
    while (arr.some((item) => item.position === position)) {
      position = this.getEnemyPosition(this.gamePlay.boardSize);
    }

    return position;
  }

  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  checkMoveRange(selectedCharacter, targetIndex) {
    const distance = this.calcDistance(selectedCharacter.position, targetIndex) <= this.getMoveRange(selectedCharacter);
    const cellEmpty = this.checkCellEmpty(targetIndex);
    return distance && cellEmpty;
  }

  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
  checkAttackRange(selectedCharacter, targetIndex) {
    const distance = this.calcDistance(selectedCharacter.position, targetIndex) <= this.getAttackRange(selectedCharacter);
    const targetCharacter = this.positions.find((char) => char.position === targetIndex);
    const isEnemy = this.isEnemy(targetCharacter);

    return distance && isEnemy;
  }

  //–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
  checkCellEmpty(targetIndex) {
    return !this.positions.some((char) => char.position === targetIndex);
  }

  //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
  playerTypes() {
    return [Bowman, Magician, Swordsman];
  }

  //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  enemyTypes() {
    return [Daemon, Undead, Vampire];
  }

  //—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–æ–º
  isPlayer(character) {
    if (!character) {
      return false;
    }
    return this.playerTypes().some((type) => character.character instanceof type);
  }

  //—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
  isEnemy(character) {
    if (!character) {
      return false;
    }
    return this.enemyTypes().some((type) => character.character instanceof type);
  }
  
  //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
  getPlayerPosition(boardSize) {
    const cellIndexArr = [];

    for(let i = 0; i < boardSize ** 2; i += boardSize) {
      cellIndexArr.push(i, i + 1);
    }

    return cellIndexArr[Math.floor(Math.random() * cellIndexArr.length)];
  }

  //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  getEnemyPosition(boardSize) {
    const cellIndexArr = [];

    for(let i = 0; i < boardSize ** 2; i += boardSize) {
      cellIndexArr.push(i + boardSize - 2, i + boardSize - 1);
    }

    return cellIndexArr[Math.floor(Math.random() * cellIndexArr.length)];
  }  

  //–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
  calcDistance(position, newPosition) {
    const row1 = Math.floor(position / this.gamePlay.boardSize);
    const col1 = position % this.gamePlay.boardSize;

    const row2 = Math.floor(newPosition / this.gamePlay.boardSize);
    const col2 = newPosition % this.gamePlay.boardSize;

    return Math.max(Math.abs(row1 - row2), Math.abs(col1 - col2));
  }

  //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  getMoveRange(selectedCharacter) {
    switch (selectedCharacter.character.type) {
      case 'swordsman':
      case 'undead':
        return 4; // –ú–µ—á–Ω–∏–∫–∏ –∏ —Å–∫–µ–ª–µ—Ç—ã 4 –∫–ª–µ—Ç–∫–∏
      case 'bowman':
      case 'vampire':
        return 2; // –õ—É—á–Ω–∏–∫–∏ –∏ –≤–∞–º–ø–∏—Ä—ã 2 –∫–ª–µ—Ç–∫–∏
      case 'magician':
      case 'daemon':
        return 1; // –ú–∞–≥–∏ –∏ –¥–µ–º–æ–Ω—ã 1 –∫–ª–µ—Ç–∫—É
    }
  }

  //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  getAttackRange(selectedCharacter) {
    switch (selectedCharacter.character.type) {
      case 'swordsman':
      case 'undead':
        return 1; // –ú–µ—á–Ω–∏–∫–∏ –∏ —Å–∫–µ–ª–µ—Ç—ã 1 –∫–ª–µ—Ç–∫a
      case 'bowman':
      case 'vampire':
        return 2; // –õ—É—á–Ω–∏–∫–∏ –∏ –≤–∞–º–ø–∏—Ä—ã 2 –∫–ª–µ—Ç–∫–∏
      case 'magician':
      case 'daemon':
        return 4; // –ú–∞–≥–∏ –∏ –¥–µ–º–æ–Ω—ã 4 –∫–ª–µ—Ç–∫–∏
    }
  }

  //–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  createCharacterInfo(index) {
    for (const character of this.positions) {
      if(character.position === index) {
        return `üéñ${character.character.level} ‚öî${character.character.attack} üõ°${character.character.defence} ‚ù§${character.character.health}`;
      }
    }
  }
}

